/**<<<<<<<<<<<<<<<<<<< Have updated the ErrorHandler generated by SAP 
This file gets called in init of component js as below
this._oErrorHandler = new ErrorHandler(this);
>>>>>>>>>>>>>>>>>>>>>*/





sap.ui.define([
	"sap/ui/base/Object",
	"sap/m/MessageBox",
	"sap/ui/core/MessageType",
	"sap/m/MessageItem",
	"sap/m/MessageView",
	"sap/ui/model/json/JSONModel",
	"sap/m/Dialog",
	"sap/m/Button",
	"sap/m/Bar",
	"sap/m/Text",
	"sap/m/Link"
], function (UI5Object, MessageBox, MessageType, MessageItem, MessageView, JSONModel, Dialog, Button, Bar, Text, Link) {
	"use strict";

	return UI5Object.extend("message.controller.ErrorHandler", {

		/**
		 * Handles application errors by automatically attaching to the model events and displaying errors when needed.
		 * @class
		 * @param {sap.ui.core.UIComponent} oComponent reference to the app's component
		 * @public
		 * @alias message.controller.ErrorHandler
		 */
		constructor: function (oComponent) {
			this.Parent = oComponent;
			this._oResourceBundle = oComponent.getModel("i18n").getResourceBundle();
			this._oComponent = oComponent;
			this._oModel = oComponent.getModel();
			this._variantModel = oComponent.getModel("common");
			this._bMessageOpen = false;
			this._sErrorText = this._oResourceBundle.getText("errorText");

			const attachModel = (model) => {
				model.attachMetadataFailed(function (oEvent) {
					var oParams = oEvent.getParameters();
					this._showServiceError(oParams.response);
				}, this);

				model.attachRequestFailed(function (oEvent) {
					var oParams = oEvent.getParameters();
					// An entity that was not found in the service is also throwing a 404 error in oData.
					// We already cover this case with a notFound target so we skip it here.
					// A request that cannot be sent to the server is a technical error that we have to handle though
					if (oParams.response.statusCode !== "404" || (oParams.response.statusCode === 404 && oParams.response.responseText.indexOf(
							"Cannot POST") === 0)) {
						this._showServiceError(oParams.response);
					}
				}, this);
			}

			attachModel(this._oModel); //For default model
			attachModel(this._variantModel); //Variant model
		},

		/**
		 * Shows a {@link sap.m.MessageBox} when a service call has failed.
		 * Only the first error message will be display.
		 * @param {string} sDetails a technical error to be displayed on request
		 * @private
		 */
		_showServiceError: function (sDetails) {
			if (this._bMessageOpen) {
				return;
			}
			this._bMessageOpen = true;
			try {
				//Get the incomming messages
				const responseObject = JSON.parse(sDetails.responseText);
				const multiMessage = responseObject.error.innererror.errordetails;
				//Convert to internal format
				const multiMessages =  this._convertMultiMessage(multiMessage);
				if (multiMessages.length > 0 && multiMessages.length <= 1) {
					const singleMessage = multiMessages[0].description;
					//Show the single message
					this._showSingleError(singleMessage);
				} else if (multiMessages.length > 1) {
					//Show Multiples messages
					this._showMultipleMessages(multiMessages);
				} else {
					if (responseObject.error.message.value) {
						this._showSingleError(responseObject.error.message.value);
					} else {
						this._showGenericError(sDetails);
					}
				}

			} catch (err) {
				//Give generic error				
				this._showGenericError(sDetails);
			}
		},
		/**
		 * Shows a {@link sap.m.MessageBox} with sinle message
		 */
		_showSingleError(message) {
			MessageBox.error(
				message, {
					id: "serviceErrorMessageBox",
					styleClass: this._oComponent.getContentDensityClass(),
					actions: [MessageBox.Action.CLOSE],
					onClose: function () {
						this._bMessageOpen = false;
					}.bind(this)
				}
			);
		},

		_showGenericError(message) {
			MessageBox.error(
				this._sErrorText, {
					id: "serviceErrorMessageBox",
					details: message,
					styleClass: this._oComponent.getContentDensityClass(),
					actions: [MessageBox.Action.CLOSE],
					onClose: function () {
						this._bMessageOpen = false;
					}.bind(this)
				}
			);
		},
		
		/**
		 * Convert multi message to valid format and filtout irrelevant ones.
		 */
		_convertMultiMessage(multiMessage){
			const msgType = {
				error: MessageType.Error,
				warning: MessageType.Warning,
				info: MessageType.Information,
				success: MessageType.Success
			};
			
			//Return multiple messages
			const multiMessages = [];
			multiMessage.forEach((messageline) => {
				let type = "";
				const message = messageline.message;
				if (message === "An exception was raised") {
					return;
				}
				multiMessages.push({
					type: msgType[messageline.severity] === undefined ? MessageType.Error : msgType[messageline.severity], //Get message type
					description: message
				});
			});	
			
			return multiMessages;
		},
		/**
		 * Shows multi messages using Message view
		 */
		_showMultipleMessages(multiMessages) {
			const oMessageTemplate = new MessageItem({
				type: '{type}',
				title: '{description}',
			});

			const oModel = new JSONModel();

			oModel.setData(multiMessages);
			//Messageview
			this.oMessageView = new MessageView({
				showDetailsPageHeader: false,
				itemSelect: function () {
					oBackButton.setVisible(true);
				},
				items: {
					path: "/",
					template: oMessageTemplate
				}
			});

			const oBackButton = new Button({
				icon: sap.ui.core.IconPool.getIconURI("nav-back"),
				visible: false,
				press: function () {
					const content = this.getParent().getParent().getContent();
					if (content.length > 0) {
						content[0].navigateBack();
					}
					this.setVisible(false);
				}
			});

			this.oMessageView.setModel(oModel);
			const dialogNotOpen = () => {
				this._bMessageOpen = false;
			}
			this.oDialog = new Dialog({
				resizable: true,
				content: this.oMessageView,
				state: 'Error',
				beginButton: new Button({
					press: function () {
						this.getParent().close();
						dialogNotOpen.call(this);
					},
					text: "Close"
				}),
				customHeader: new Bar({
					contentMiddle: [
						new Text({
							text: "Error"
						})
					],
					contentLeft: [oBackButton]
				}),
				contentHeight: "300px",
				contentWidth: "500px",
				verticalScrolling: false
			});

			this.oDialog.open();
		}
	});

});
